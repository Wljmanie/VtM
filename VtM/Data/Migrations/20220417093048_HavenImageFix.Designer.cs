// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VtM.Data;

#nullable disable

namespace VtM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220417093048_HavenImageFix")]
    partial class HavenImageFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VtM.Models.Background", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackgroundName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BackgroundValue")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("VtM.Models.BloodPotency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaneSeverity")
                        .HasColumnType("int");

                    b.Property<int>("BloodSurge")
                        .HasColumnType("int");

                    b.Property<int>("DamageMendedPerRouse")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinePowerBonues")
                        .HasColumnType("int");

                    b.Property<string>("FeedingPenalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BloodPotencies");
                });

            modelBuilder.Entity("VtM.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("VtM.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AggravatedDamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("AggravatedWillpowerDamageTaken")
                        .HasColumnType("int");

                    b.Property<string>("Ambition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApparentAge")
                        .HasColumnType("int");

                    b.Property<string>("Appearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BloodPotencyId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterPublicity")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicleId")
                        .HasColumnType("int");

                    b.Property<int>("ClanId")
                        .HasColumnType("int");

                    b.Property<int>("Composure")
                        .HasColumnType("int");

                    b.Property<string>("Concept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoterieId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfDeath")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Desire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<string>("DistinguishingFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceSpent")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("int");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Generation")
                        .HasColumnType("int");

                    b.Property<int>("HavenId")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Humanity")
                        .HasColumnType("int");

                    b.Property<int?>("Hunger")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Manipulation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PredatorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Resolve")
                        .HasColumnType("int");

                    b.Property<int>("ResonanceType")
                        .HasColumnType("int");

                    b.Property<string>("Sire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stains")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("SuperficialDamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("SuperficialWillpowerDamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("ThinBloodDistillationMethod")
                        .HasColumnType("int");

                    b.Property<int>("TrueAge")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Wits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BloodPotencyId");

                    b.HasIndex("ChronicleId");

                    b.HasIndex("ClanId");

                    b.HasIndex("CoterieId");

                    b.HasIndex("HavenId");

                    b.HasIndex("PredatorTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VtM.Models.CharacterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharactersSkills");
                });

            modelBuilder.Entity("VtM.Models.Chronicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoryTellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StoryTellerId");

                    b.ToTable("Chronicles");
                });

            modelBuilder.Entity("VtM.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bane")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("VtM.Models.Coterie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Chasse")
                        .HasColumnType("int");

                    b.Property<string>("CoterieType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lien")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Portillon")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coteries");
                });

            modelBuilder.Entity("VtM.Models.CoterieTenet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CoterieId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CoterieId");

                    b.ToTable("coterieTenets");
                });

            modelBuilder.Entity("VtM.Models.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("VtM.Models.DisciplineLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("DisciplineLevels");
                });

            modelBuilder.Entity("VtM.Models.DisciplinePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AmalgamId")
                        .HasColumnType("int");

                    b.Property<int?>("AmalgramLevel")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("CounterRollDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineLevel")
                        .HasColumnType("int");

                    b.Property<string>("DisciplinePowerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisciplinePowerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouseCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmalgamId");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("DisciplinePowers");
                });

            modelBuilder.Entity("VtM.Models.Flaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Flaws");
                });

            modelBuilder.Entity("VtM.Models.Haven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HavenRating")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Havens");
                });

            modelBuilder.Entity("VtM.Models.HavenFlaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HavenId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("HavenId");

                    b.ToTable("HavenFlaws");
                });

            modelBuilder.Entity("VtM.Models.HavenImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HavenId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HavenId");

                    b.ToTable("HavenImages");
                });

            modelBuilder.Entity("VtM.Models.HavenMerit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HavenId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("HavenId");

                    b.ToTable("HavenMerits");
                });

            modelBuilder.Entity("VtM.Models.LoreSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("LoreSheets");
                });

            modelBuilder.Entity("VtM.Models.LoreSheetPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("LoreSheetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LoreSheetId");

                    b.ToTable("LoreSheetParts");
                });

            modelBuilder.Entity("VtM.Models.Merit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Merits");
                });

            modelBuilder.Entity("VtM.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("VtM.Models.Possession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<bool>("CharacterWearsIt")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Possessions");
                });

            modelBuilder.Entity("VtM.Models.PredatorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HuntingRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("PredatorTypes");
                });

            modelBuilder.Entity("VtM.Models.Ritual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RitualLevel")
                        .HasColumnType("int");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Rituals");
                });

            modelBuilder.Entity("VtM.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionLevel1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLevel2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLevel3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLevel4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLevel5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("VtM.Models.SkillSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CharacterSkillId")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSkillId");

                    b.ToTable("SkillSpecializations");
                });

            modelBuilder.Entity("VtM.Models.ThinBloodAlchemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivationCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AlchemyLevel")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DicePools")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ThinBloodAlchemies");
                });

            modelBuilder.Entity("VtM.Models.TouchstoneConviction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Conviction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Touchstone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("TouchstoneConvictions");
                });

            modelBuilder.Entity("VtM.Models.VtMUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicleId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChronicleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VtM.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Ammo")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("DamageModifier")
                        .HasColumnType("int");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VtM.Models.VtMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VtM.Models.VtMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.VtMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VtM.Models.VtMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VtM.Models.Background", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Backgrounds")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.Character", b =>
                {
                    b.HasOne("VtM.Models.BloodPotency", "BloodPotency")
                        .WithMany()
                        .HasForeignKey("BloodPotencyId");

                    b.HasOne("VtM.Models.Chronicle", "Chronicle")
                        .WithMany()
                        .HasForeignKey("ChronicleId");

                    b.HasOne("VtM.Models.Clan", "Clan")
                        .WithMany()
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Coterie", "Coterie")
                        .WithMany("Characters")
                        .HasForeignKey("CoterieId");

                    b.HasOne("VtM.Models.Haven", "Haven")
                        .WithMany()
                        .HasForeignKey("HavenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.PredatorType", "PredatorType")
                        .WithMany()
                        .HasForeignKey("PredatorTypeId");

                    b.HasOne("VtM.Models.VtMUser", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPotency");

                    b.Navigation("Chronicle");

                    b.Navigation("Clan");

                    b.Navigation("Coterie");

                    b.Navigation("Haven");

                    b.Navigation("PredatorType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VtM.Models.CharacterSkill", b =>
                {
                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId");

                    b.HasOne("VtM.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("VtM.Models.Chronicle", b =>
                {
                    b.HasOne("VtM.Models.VtMUser", "StoryTeller")
                        .WithMany()
                        .HasForeignKey("StoryTellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryTeller");
                });

            modelBuilder.Entity("VtM.Models.Clan", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.CoterieTenet", b =>
                {
                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("VtM.Models.Coterie", "Coterie")
                        .WithMany("CoterieTenets")
                        .HasForeignKey("CoterieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Coterie");
                });

            modelBuilder.Entity("VtM.Models.Discipline", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.DisciplineLevel", b =>
                {
                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("DisciplineLevels")
                        .HasForeignKey("CharacterId");

                    b.HasOne("VtM.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.Navigation("Character");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("VtM.Models.DisciplinePower", b =>
                {
                    b.HasOne("VtM.Models.Discipline", "Amalgram")
                        .WithMany()
                        .HasForeignKey("AmalgamId");

                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", null)
                        .WithMany("DisciplinePowers")
                        .HasForeignKey("CharacterId");

                    b.HasOne("VtM.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.Navigation("Amalgram");

                    b.Navigation("Book");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("VtM.Models.Flaw", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Flaw")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.HavenFlaw", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Haven", "Haven")
                        .WithMany("HavenFlaw")
                        .HasForeignKey("HavenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Haven");
                });

            modelBuilder.Entity("VtM.Models.HavenImage", b =>
                {
                    b.HasOne("VtM.Models.Haven", null)
                        .WithMany("HavenImages")
                        .HasForeignKey("HavenId");
                });

            modelBuilder.Entity("VtM.Models.HavenMerit", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Haven", "Haven")
                        .WithMany("HavenMerits")
                        .HasForeignKey("HavenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Haven");
                });

            modelBuilder.Entity("VtM.Models.LoreSheet", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.LoreSheetPart", b =>
                {
                    b.HasOne("VtM.Models.Character", null)
                        .WithMany("LoreSheetParts")
                        .HasForeignKey("CharacterId");

                    b.HasOne("VtM.Models.LoreSheet", "LoreSheet")
                        .WithMany()
                        .HasForeignKey("LoreSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoreSheet");
                });

            modelBuilder.Entity("VtM.Models.Merit", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Merits")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.Note", b =>
                {
                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Notes")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.Possession", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Possessions")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.PredatorType", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.Ritual", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", null)
                        .WithMany("Rituals")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.Skill", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.SkillSpecialization", b =>
                {
                    b.HasOne("VtM.Models.CharacterSkill", "CharacterSkill")
                        .WithMany("Specializations")
                        .HasForeignKey("CharacterSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSkill");
                });

            modelBuilder.Entity("VtM.Models.ThinBloodAlchemy", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", null)
                        .WithMany("ThinBloodAlchemies")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VtM.Models.TouchstoneConviction", b =>
                {
                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("TouchstoneConvictions")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.VtMUser", b =>
                {
                    b.HasOne("VtM.Models.Chronicle", null)
                        .WithMany("Players")
                        .HasForeignKey("ChronicleId");
                });

            modelBuilder.Entity("VtM.Models.Weapon", b =>
                {
                    b.HasOne("VtM.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VtM.Models.Character", "Character")
                        .WithMany("Weapons")
                        .HasForeignKey("CharacterId");

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VtM.Models.Character", b =>
                {
                    b.Navigation("Backgrounds");

                    b.Navigation("CharacterSkills");

                    b.Navigation("DisciplineLevels");

                    b.Navigation("DisciplinePowers");

                    b.Navigation("Flaw");

                    b.Navigation("LoreSheetParts");

                    b.Navigation("Merits");

                    b.Navigation("Notes");

                    b.Navigation("Possessions");

                    b.Navigation("Rituals");

                    b.Navigation("ThinBloodAlchemies");

                    b.Navigation("TouchstoneConvictions");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("VtM.Models.CharacterSkill", b =>
                {
                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("VtM.Models.Chronicle", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("VtM.Models.Coterie", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("CoterieTenets");
                });

            modelBuilder.Entity("VtM.Models.Haven", b =>
                {
                    b.Navigation("HavenFlaw");

                    b.Navigation("HavenImages");

                    b.Navigation("HavenMerits");
                });

            modelBuilder.Entity("VtM.Models.VtMUser", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
